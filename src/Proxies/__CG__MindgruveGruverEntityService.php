<?php

namespace DoctrineProxies\__CG__\Mindgruve\Gruver\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Service extends \Mindgruve\Gruver\Entity\Service implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Mindgruve\\Gruver\\Entity\\Service' . "\0" . 'id', 'name', 'publicHosts', 'publicPorts', 'project', 'releases', 'currentRelease', 'pendingRelease', 'mostRecentRelease', 'rollbackRelease', 'status', 'createdAt', 'modifiedAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'Mindgruve\\Gruver\\Entity\\Service' . "\0" . 'id', 'name', 'publicHosts', 'publicPorts', 'project', 'releases', 'currentRelease', 'pendingRelease', 'mostRecentRelease', 'rollbackRelease', 'status', 'createdAt', 'modifiedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Service $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function addRelease(\Mindgruve\Gruver\Entity\Release $release)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRelease', [$release]);

        return parent::addRelease($release);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRelease(\Mindgruve\Gruver\Entity\Release $release)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRelease', [$release]);

        return parent::removeRelease($release);
    }

    /**
     * {@inheritDoc}
     */
    public function getReleases()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getReleases', []);

        return parent::getReleases();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function getSafeName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSafeName', []);

        return parent::getSafeName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getCurrentRelease()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCurrentRelease', []);

        return parent::getCurrentRelease();
    }

    /**
     * {@inheritDoc}
     */
    public function setCurrentRelease(\Mindgruve\Gruver\Entity\Release $release = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCurrentRelease', [$release]);

        return parent::setCurrentRelease($release);
    }

    /**
     * {@inheritDoc}
     */
    public function getPendingRelease()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPendingRelease', []);

        return parent::getPendingRelease();
    }

    /**
     * {@inheritDoc}
     */
    public function getRollbackRelease()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRollbackRelease', []);

        return parent::getRollbackRelease();
    }

    /**
     * {@inheritDoc}
     */
    public function setMostRecentRelease(\Mindgruve\Gruver\Entity\Release $release = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMostRecentRelease', [$release]);

        return parent::setMostRecentRelease($release);
    }

    /**
     * {@inheritDoc}
     */
    public function getMostRecentRelease()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMostRecentRelease', []);

        return parent::getMostRecentRelease();
    }

    /**
     * {@inheritDoc}
     */
    public function getProject()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getProject', []);

        return parent::getProject();
    }

    /**
     * {@inheritDoc}
     */
    public function setProject(\Mindgruve\Gruver\Entity\Project $project)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setProject', [$project]);

        return parent::setProject($project);
    }

    /**
     * {@inheritDoc}
     */
    public function setPublicHosts(array $hosts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublicHosts', [$hosts]);

        return parent::setPublicHosts($hosts);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublicHosts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublicHosts', []);

        return parent::getPublicHosts();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublicPorts($port)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublicPorts', [$port]);

        return parent::setPublicPorts($port);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublicPorts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublicPorts', []);

        return parent::getPublicPorts();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusOptions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusOptions', []);

        return parent::getStatusOptions();
    }

    /**
     * {@inheritDoc}
     */
    public function getModifiedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModifiedAt', []);

        return parent::getModifiedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setModifiedAt(\DateTime $dateTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setModifiedAt', [$dateTime]);

        return parent::setModifiedAt($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $dateTime)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$dateTime]);

        return parent::setCreatedAt($dateTime);
    }

    /**
     * {@inheritDoc}
     */
    public function updateTimestamps()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'updateTimestamps', []);

        return parent::updateTimestamps();
    }

}
